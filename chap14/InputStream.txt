package chap14;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

/*
 * 	FileInputStream 예제
 * 	 - 파일의 내용을 읽어서 화면에 출력하기
 * 	 
 * 	 - 주요 메서드
 * 		1. int read() : 1byte씩 읽어서 내용을 리턴 (char로는 자동 형변환 돼서 char 출력 가능)
 * 		2. int read(byte[] buf) : buf(buffer)의 크기만큼 읽어서 내용을 buf에 저장하고, 실제 읽은 바이트 수를 리턴.
 * 		3. int read(byte[] buf, int start, int len)
 * 			: len만큼 읽어서 내용을 buf에 저장하고 start 인덱스부터 저장 후, 실제 읽은 바이트 수 리턴
 * 
 * 		4. int available() : 읽을 수 있는 바이트 수 리턴
 * 
 * 		buf
 * 		  0	  1   2   3   4   5
 *		│	│	│	│	│	│	│
 * 		  x	  └		leng ....	
 * 		
 * 		0에는 내용 저장이 x, 
 */
public class FileInputStreamEx1 {
	public static void main(String[] args) throws IOException {
		FileInputStream fis = new FileInputStream("src/chap14/InputStreamEx1.java");
		int data = 0;
		System.out.println("--------------- read()메서드를 이용하여 읽기 ---------------");
		while((data=fis.read()) != -1) {	// read()로 읽으면 1byte씩 읽어서 한글 깨짐.
								// -1 : 파일의 끝을 의미. 파일의 끝이 되면 리턴. 끝까지 (EOF:End Of File)
			System.out.print((char)data);
		}
		
		System.out.println("--------------- read(byte[]) 메서드를 이용하여 읽기 ---------------");
		fis = new FileInputStream("src/chap14/InputStreamEx1.java");		// 위에 있어도 안 쓰면 밑에도 안 찍힘. 반드시 있어야함.
		// fis.available()	: 파일로부터 읽기 가능한 바이트 수(= 읽으려는 파일의 바이트 수)
		// 기본 available() byte -> 읽을때마다 바이트 수가 깎임. => 읽고, 실제 읽은 바이트 수를 전달해줌
		// 읽은 길이는 data, 실제 data는 buf가 가지고 있음. 
		// buf: 실제 읽은 데이터
		// data: 실제로 읽은 byte수
		byte[] buf = new byte[fis.available()];	
		while((data=fis.read(buf)) != -1) {					// 위에서 이미 끝까지 읽어서 다시 처음으로 못 돌아감	↑ 다시 한번 만들어줘야함.
			System.out.print(new String(buf,0,data));
		}
		/* new String(buf,0,data): 생성자
		   buf 라는 배열의 0번지부터, data번지 앞까지 문자열로 생성. 
		   버퍼의 index 0부터 data 앞까지 
		*/
		System.out.println("--------------- read(byte[] buf, int start, int len) 메서드를 이용하여 읽기 ---------------");
		fis = new FileInputStream("src/chap14/InputStreamEx1.java");	
		buf = new byte[fis.available()];	
//		read(buf,0,buf.length) : 파일의 내용을 읽어서, buf 0번지부터, buf.length 길이만큼 buf에 내용 저장. 실제로 읽은 byte 수를 리턴.
		while((data=fis.read(buf,0,buf.length)) != -1) {	// start int 변경하면, length도 그만큼 빼주고
			System.out.print(new String(buf,0,data));		// start int와 숫자 맞춰주기
		}


		/*
		 *  FileInputStream은 FileNotFoundException 이라는 예외처리해야하는데 
		 *  read()는 IOException 예외처리를 해야함.
		 *  FileNotFoundException은 IOException의 하위 예외처리라 IOException이나, Exception 해주면 됨.
		 *  
		 */
	}
}
package chap14;

import java.io.IOException;
import java.io.InputStream;

/*
 	입출력스트림: 데이터 이동통로. 단방향.
 		입력스트림	┌ 바이트형 스트림: 1byte 단위로 읽음 (동영상, 이미지 등)
				│	└ 최상위 스트림: inputStream
				│		└ 하위 클래스: FileInputStream
				│
				└ 문자형 스트림	: 2byte 단위로 읽음	(텍스트 데이터)
					└ 최상위 스트림: Reader
						└ 하위 클래스: FileReader
				
					
		출력스트림	┌ 바이트형 스트림: 1byte 단위로 출력 (동영상, 이미지 등)
				│	└ 최상위 스트림: OutputStream
				│		└ 하위 클래스: FileOutputStream, PrintStream (byte형 출력 스트림)
				│
				└ 문자형 스트림	: 2byte 단위로 출력 (텍스트 데이터)
					└ 최상위 스트림: Writer
						└ 하위 클래스: FileWriter 
						
		InputStreamReader: 바이트형 입력 스트림을 -> 문자형 입력 스트림으로 변경은 가능
		OutputStreamWriter: 바이트형 출력 스트림을 -> 문자형 출력 스트림으로 변경은 가능
								1byte => 2byte
								
	 자바 자체에서 제공하는 표준 입출력 스트림 객체
		 표준 입력 스트림: System.in => 키보드에서 제공(입력) 된 값이 나의 프로그램으로 들어오게 해줌.
		  	└ 자료형: InputStrem System.in
		 표준 출력 스트림: System.out => 콘솔로 출력.
		 	└ 자료형: PrintStream System.out (얘만 PrintStream - OutputStream의 하위 클래스)
		 표준 오류 스트림: System.err => 콘솔로 출력 (출력 스트림)
	 		└ 자료형: PrintStream System.err
 */
public class InputStreamEx1 {
	public static void main(String[] args) throws IOException {
		// 키보드에서 바로, InputStream-> byte형 입력 스트림
		// in.read(): 키보드에서 들어오는 입력값을 1byte 단위로 data에 넣어줌
		// 영문, 숫자 -> 2byte여도 1byte만 읽어서도 문자가 돼서 가능하지만, 한글은 2byte가 필요함. => 한글 깨짐
		
		InputStream in = System.in;		
		int data = 0;
						//read는 1byte 읽어서 집어 넣고 읽어서 넣고 반복
		while((data=in.read()) != -1) {	 // 예외처리를 반드시 해야하는 메서드, ctrl+z 로 함수 끝남
			System.out.print((char)data);
		}
	
	}
}
package chap14;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
/*
 *	 ObjectOutputStream을 이용하여 만든 객체를 저장한 object.ser 파일을 읽어 객체 복원하기
 */
public class ObjectInputStreamEx1 {
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream("Object.ser"));
		Customer c1 = (Customer)ois.readObject();		// 형변환
		Customer c2 = (Customer)ois.readObject();
		System.out.println(c1+","+c2);
	}
}
package chap14;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
/*
 *	object2.ser 파일을 읽어 객체 복원하기 
 */
public class ObjectInputStreamEx2 {
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream("object2.ser"));
		User u1 = (User)ois.readObject();	//형변환 User 안에 readObject
		User u2 = (User)ois.readObject();
		System.out.println(u1+","+u2);
	}
}
